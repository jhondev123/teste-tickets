services:
  pgsql:
    image: postgres
    container_name: pgsql
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    networks:
      - teste-tickets

  nginx:
    image: nginx
    container_name: nginx
    ports:
      - "80:80"
      - "8000:8000"
      - "8001:8001"
      - "8002:8002"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/frontend.conf:/etc/nginx/frontend.conf
      - ./nginx/load-balancer.conf:/etc/nginx/load-balancer.conf
      - ./nginx/apis.conf:/etc/nginx/apis.conf
    networks:
      - teste-tickets
    depends_on:
      - api1
      - api2
      - frontend

  api1:
    build:
      context: ./teste-tickets-back
      dockerfile: ./docker/Dockerfile
    container_name: api1
    networks:
      - teste-tickets
    depends_on:
      - pgsql
    volumes:
      - ./teste-tickets-back/docker/entrypoint.sh:/app/docker/entrypoint.sh
    entrypoint: [ "sh", "/app/docker/entrypoint.sh" ]

  api2:
    build:
      context: ./teste-tickets-back
      dockerfile: ./docker/Dockerfile
    container_name: api2
    networks:
      - teste-tickets
    depends_on:
      - pgsql
    volumes:
      - ./teste-tickets-back/docker/entrypoint.sh:/app/docker/entrypoint.sh
    entrypoint: [ "sh", "/app/docker/entrypoint.sh" ]

  frontend:
    build:
      context: ./teste-tickets-front
      dockerfile: ./docker/Dockerfile
    container_name: frontend
    ports:
      - "3000:3000"
    volumes:
      - ./teste-tickets-front/docker/entrypoint.sh:/app/docker/entrypoint.sh
    depends_on:
      - api1
      - api2
    networks:
      - teste-tickets
    entrypoint: [ "sh", "/app/docker/entrypoint.sh" ]



networks:
  teste-tickets:
    driver: bridge
